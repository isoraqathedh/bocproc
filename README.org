#+Title: Book of Conworlds Processing System v. 7
#+Date: 2019-12-19

This is the seventh generation of the Book of Conworlds Scan Processing System
(typically called ~bocproc~).
Unlike the previous generations, which was largely focused on individual scans,
this new generation will attempt to handle everything there is
to do with these conlanging notebooks,
including searching, versions and the ~bpc~ script
in a modular manner with separation of concerns.

* Components
These are the planned components.
It is defined as such to be expandable to delay the appearance of generation 8
for as long as possible.

** Core
The Core package (~info.isoraqathedh.bocproc.core~)
is where pages are defined, categorised and grouped together.
Anything that is intrinsic to a page,
such as its title, page number and any additional comments,
will live in the core component,
as are the more abstract concepts such as books, tags and affinities.
The configuration file will also be processed here,
which works as a rudimentary data store.

The core also defines a number of hooks that the other layers can use.

** Data store
The data store component
(~info.isoraqathedh.bocproc.data-store~, a.k.a. ~bocdb~)
is where the abstract pages are realised into various storage systems,
including the file system where the data are actually stored,
and a cache file where metadata is stored for faster retrieval.

It is also responsible for reading from and writing to those formats,
and making sure they sync up.

In the future this might include a full-on database solution,
but this is not deemed necessary at the present time.

** Publication
The publication package (~info.isoraqathedh.publication~)
is the component responsible for pushing processed scans
to the rest of the world,
including websites such as Tumblr and Twitter.
It will use libraries to that effect.

The difference between the publication and data store components
is the restricted-access nature of publications
it is not guaranteed that one can edit or delete a published post,
only to write it.
Each publication target can choose to support it or not.

** Script
The script package (~info.isoraqathedh.bocproc.script~)
handles reading of the ~bpc~ script,
which itself uses the package ~info.isoraqathedh.bocproc.bpc-parser~,
as in previous iterations.
It will also call on other programs to do proper rotation and metadata imbuing,
as with in the sixth generation.

This component will also be the part that requires an executable to be made.
This would most likely be handled via ~sclript~
(or it will be developed here and then moved to the ~sclript~ project,
which is the more likely outcome.)
The executable will then be the interpreter for ~bpc~ scripts.

As a whole the script will be more programmatic in nature,
with the order of things now mattering
and some functions being available in different contexts.
However it would remain broadly compatible with the old version.

** Web interface
The web interface package
(~info.isoraqathedh.bocproc.web~, a.k.a ~bocdar~)
will eventually be a way to view pages in a convenient web-based format.
As of now, this is the least-well defined component.
It could be a ~radiance~ module, or just a generator of HTML pages.
This will probably be left for later definition.

* Concepts
** Goal
The goal of ~bocproc~ is to organise and add metadata to a bunch of files.
The metadata should be useful enough that they should act as categories,
and one should be able to search and retrieve files by those categories.
Additionally, adding files into the system should be easy and routine,
as this happens frequently;
and searching should be flexible –
this is a more common task that has become more prominent as of recently.

These files are in the original incarnation of the system
scans of notebook pages discussing constructed worlds and languages,
which steers much of the design and terminology of the system even up to today.

The key work flows are as such:

*** Induction
Adding files into the system is an important part of ~bocproc~,
and this is done by defining their role through ~bpc~ files.
The specification for these files will be published at a later date,
but will be broadly the same as the generation 6 syntax.
However, it is expected to remain to be in a similar (poor) sandbox.

A formal specification of ~bpc~ will be written at a later date,
but is expected to cover at least what the generation 6 script did:

- Rotate the image
- Add EXIF metadata into a file
- Publish to social media websites

It should also now be able to:

- Crop the image (perhaps marking the crop point(s) in a GUI)
- Add the image to a database for searching

*** Search
The search facility should be merged together with the rest of ~bpc~,
but the old language used by ~bocsearch~ should be kept as a legacy form.

A formal specification of both languages will be written.

** Key terms
- Entity :: An object that ~bocproc~ manages directly.
- Stable entity :: An entity that is not expected to change very much or very quickly
                   over the lifetime of the system.
                   They generally have a relatively short name
                   with which both humans and computers can refer to it by
                   and most importantly are not concrete –
                   their existence is entirely within the system.
                   They generally have short names
                   that are both human- and machine-readable, called slugs,
                   though they can have other names.

                   Regardless of their existence,
                   they all have read syntax so they can be stored as Lisp lists
                   in a basic text file.
                   This property is used to help create some of configuration.
- Affinity :: A tag for tags –
              a particular nature that it shares with other tags,
              in a non-mutually-exclusive manner.
              Affinities allow tags to operate together in a "check box" manner,
              which is more effective than them alone.

              Affinities may not be nested.
              However, tags may become hierarchical in the future,
              obviating the need for affinities.
- Tag :: A particular theme or topic that a page has.
         This normally describes what is written about in that page,
         but may also be a number of other details,
         such as what features in the page should be noted
         or in what state the page is in (damaged, partial, &c.).

         Tags have a number of features that allow them to integrate into other places.
         They at least have a name, which is a human-readable, full-Unicode name
         that is displayed in an aesthetic representation,
         and a slug name, a name that is both human- and machine-readable
         that uses a limited character set suitable for almost any scenario
         (specifically, the characters A-Z, a-z, 0-9 and hyphen,
         with the letters being case insensitive.)
         They may also have other names,
         such as a corresponding tag name in a social media site,
         or a name that uses ASCII but has no other restrictions, and so on;
         as well as other associations that the tag might have.
         Those are stored in a plist that each tag has.
- Page :: The centre of attention for ~bocproc~.
          It consists of a bunch of images (or any files) that
          has metadata to store and search for.
          Such metadata consists of things like strings, numbers,
          times, and collections of these in any heterogeneous format,
          arranged in key-value pairs.

** Other terms
- Slug :: Slugs are names with a restricted set of characters
          that are easy for both humans and machines to read.
          To wit, they are case insensitive strings of letters and digits
          that may also have the following characters: !@%^+-=_.

          A more restrictive definition only allows - and _
          along with the letters and digits,
          with - not being the first character.

** Expected usage

** Configuration and storage files
The following files shall be used to store configuration, entities and pages.

* Reuse
Although the code is currently freely licensed,
it is highly specialised to my needs
and therefore the ability for actual reuse as-is is somewhat limited.
